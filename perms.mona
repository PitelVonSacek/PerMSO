# Generated by perms.py
# version: {{ version }}
#
# Class: {{ type }}
{% block info required %}{% endblock %}
#
# Avoid: {{ avoid | join(', ') }}
# Sum indecomposable: {{ sum_indecomposable }}
# Skew indecomposable: {{ skew_indecomposable }}
# Simple: {{ simple }}
# Extra conditions:
#   Class dependent: {{ class_extra }}
#   Class independent: {{ extra }}

m2l-str;


{% block orderings required %}{% endblock %}


{%- from "macros.mona" import match, match_vars %}
pred avoid() =
  {% for pat in avoid -%}
    ~(ex1 {{ match_vars(pat) }}: {{ match(pat) }}) &
  {% endfor -%}
  true;

pred sum_decomposable() =
  # x is left-most element of upper right part
  # y is top-most element of lower left part
  ex1 x, y: all1 z: left_of(z, x) <=> ~below_of(y, z);

pred skew_decomposable() =
  # x is left-most element of lower right part
  # y is bottom-most element of upper left part
  ex1 x, y: all1 z: left_of(z, x) <=> ~below_of(z, y);

pred not_simple() = ex1 x0, x1, y0, y1:
  left_of(x0, x1) & below_of(y0, y1) &
  # not everything
  (ex1 z: left_of(z, x0) | left_of(x1, z)) &
  # horizontaly between xs <=> verticaly between ys
  all1 z:
    (left_of(z, x0) | left_of(x1, z))
    <=>
    (below_of(z, y0) | below_of(y1, z));


# class independent extra conditions
pred extra() =
  {% block hide_internals required %}{% endblock %}
  {{ extra | indent(2) }};


{% block is_valid required %}{% endblock -%}
avoid() &
extra() &
{% if sum_indecomposable -%}
  ~sum_decomposable() &
{% endif -%}
{% if skew_indecomposable -%}
  ~skew_decomposable() &
{% endif -%}
{% if simple -%}
  ~not_simple() &
{% endif -%}
true;

