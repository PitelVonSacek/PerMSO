{% extends "perms.mona" %}
{% from "macros.mona" import parts %}


{% set As = parts("A", C.n) %}
{% set Xs = parts("X", C.n) %}
{% set var_Xs = parts("var2 X", C.n) %}
{% set Ys = parts("Y", C.n) %}
{% set var_Ys = parts("var2 Y", C.n) %}


{% block info -%}
# Input matrix:
{% for row in C.M | reverse -%}
  #   {{row}}
{% endfor -%}
#
# Block indices:
{% for row in C.indices | reverse -%}
  #   {{ row | replace("None", "_") }}
{% endfor -%}
#
# Gridded: {{ gridded }}
# Computed row signs: {{ C.row_signs | reverse | join(', ') }}
# Computed col signs: {{ C.col_signs | join(', ') }}
{%- endblock info %}


{% block hide_internals -%}
  # prevent direct usage of As
  {% for i in range(C.n) -%} let1 A{{i}} = 0 in {% endfor %}
{%- endblock %}


{% block orderings %}
var2 {{As}};


pred partition({{var_Xs}}) = all1 x:
  ({% for i in range(C.n) -%} x in X{{i}} | {% endfor -%} false) &
  {% for i in range(C.n) -%}
    (x in X{{i}} => {% for j in range(C.n) if j != i -%}
      x notin X{{j}} & {##}
    {%- endfor -%} true) &
  {% endfor -%}
  true;

pred different({{var_Xs}}) =
  {% for i in range(C.n) -%}
    X{{i}} ~= A{{i}} |
  {% endfor -%}
  false;


pred left_of(var1 x, var1 y) =
  {% for i in range(C.n) %}{% for j in range(C.n) -%}
    (x in A{{i}} & y in A{{j}} & {##}
      {%- if C.blocks[i].col < C.blocks[j].col -%}
        true
      {%- elif C.blocks[i].col > C.blocks[j].col -%}
        false
      {%- elif C.col_signs[C.blocks[i].col] == 1 -%}
        x < y
      {%- else -%}
        x > y
      {%- endif -%}
    ) |
  {% endfor %}{% endfor -%}
  false;

pred below_of(var1 x, var1 y) =
  {% for i in range(C.n) %}{% for j in range(C.n) -%}
    (x in A{{i}} & y in A{{j}} & {##}
      {%- if C.blocks[i].row < C.blocks[j].row -%}
        true
      {%- elif C.blocks[i].row > C.blocks[j].row -%}
        false
      {%- elif C.row_signs[C.blocks[i].row] == 1 -%}
        x < y
      {%- else -%}
        x > y
      {%- endif -%}
    ) |
  {% endfor %}{% endfor -%}
  false;

# class specific extra conditions
pred class_extra({{var_Xs}}) =
  {{ self.hide_internals() }}
  {{ class_extra | indent(2) }};


{% for i in range(C.n) %}
pred Mon'_in_block_{{i}}({{var_Xs}}) =
  {% if i > 0 %}
    Mon'_in_block_{{i-1}}({{Xs}}) &
  {% endif %}
  (all1 x, y: (x in X{{i}} & y in X{{i}} & left_of(x, y)) => {##}
      {%- if C.blocks[i].sign == 1 -%}
        below_of(x, y)
      {%- else -%}
        below_of(y, x)
      {%- endif -%}
    );
{% endfor %}

pred Mon'_in_block({{var_Xs}}) = Mon'_in_block_{{C.n - 1}}({{Xs}});

pred Mon'_between_blocks({{var_Xs}}) =
  {% for i in range(C.n) %}{% for j in range(C.n) -%}
    (all1 x, y: (x in X{{i}} & y in X{{j}}) => {##}
      {%- if C.blocks[i].row < C.blocks[j].row -%}
        below_of(x, y) & {##}
      {%- endif -%}
      {%- if C.blocks[i].col < C.blocks[j].col -%}
        left_of(x, y) & {##}
      {%- endif -%}
    true) &
  {% endfor %}{% endfor -%}
  true;

pred Mon'_unpart({{var_Xs}}) =
  Mon'_in_block({{Xs}}) &
  Mon'_between_blocks({{Xs}});

pred Mon'({{var_Xs}}) =
  partition({{Xs}}) &
  Mon'_unpart({{Xs}});

pred bigger_than_A({{var_Xs}}) = ex1 x:
  let2 B0 = empty in
  {% for i in range(1, C.n) -%}
    let2 B{{i}} = B{{i-1}} union A{{i-1}} in
  {% endfor -%}
  # x is earlier in As than in Xs
  {% for i in range(C.n) -%}
    (x in X{{i}} => x in B{{i}}) &
  {% endfor -%}
  # and all elements left of x are the same in As and Xs
  (all1 y: left_of(y, x) => (
    {% for i in range(C.n) -%}
      (y in A{{i}} <=> y in X{{i}}) &
    {% endfor -%}
    true
  ));

pred minimal_gridding() = all2 {{Xs}}:
  Mon'({{Xs}}) & different({{Xs}}) & class_extra({{Xs}})
  => bigger_than_A({{Xs}});

pred I(var1 x, var1 y) =
  {% for i in range(C.n) -%}{%- for j in range(C.n) -%}
    {% if C.blocks[i].row != C.blocks[j].row and
          C.blocks[i].col != C.blocks[j].col -%}
      (x in A{{i}} & y in A{{j}}) |
  {##}
    {%- endif %}
  {%- endfor %}{% endfor -%}
  false;

pred cmp_lex(var1 x, var1 y) =
  {% for i in range(1, C.n) -%}{%- for j in range(i) -%}
    (x in A{{j}} & y in A{{i}}) |
  {% endfor %}{% endfor -%}
  false;

pred trace_min() = all1 a, b:
  a < b & (all1 x: x >= a & x < b => I(x, b)) =>
  cmp_lex(a, b);
{% endblock orderings %}

{% block is_valid %}
partition({{As}}) &
trace_min() &
{% if not gridded -%}
  minimal_gridding() &
{% endif -%}
class_extra({{As}}) &
{% endblock %}

